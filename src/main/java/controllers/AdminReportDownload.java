package controllers;

import model.JDBC;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import javax.servlet.ServletException;
import javax.servlet.http.*;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class AdminReportDownload extends HttpServlet {
    private JDBC jdbc;

    @Override
    public void init() throws ServletException {
        jdbc = new JDBC("1527", "simplewebdb", "app", "app");
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);

        if (session == null || !"admin".equals(session.getAttribute("user_role"))) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        // lilipat ko sa baba -footer
        String generatedBy = (String) session.getAttribute("username");

        response.setContentType("application/pdf");
        response.setHeader("Content-Disposition", "attachment; filename=\"UserReport.pdf\"");

        try {
            OutputStream out = response.getOutputStream();
            Document document = new Document();
            PdfWriter writer = PdfWriter.getInstance(document, out);
            writer.setPageEvent(new FooterHandler());
            document.open();

            // Fonts
            Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
            Font subTitleFont = new Font(Font.FontFamily.HELVETICA, 12, Font.ITALIC);
            Font textFont = new Font(Font.FontFamily.HELVETICA, 11);
            Font headerFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);

            // Header
            document.add(new Paragraph("User Role Report", titleFont));
            document.add(new Paragraph("List of users and their roles", subTitleFont));
            document.add(Chunk.NEWLINE);

            // Meta info - lilipat ko sa baba -footer
            String dateStr = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
            document.add(new Paragraph("Generated on: " + dateStr, textFont));
            document.add(new Paragraph("Generated by: " + generatedBy, textFont));
            document.add(Chunk.NEWLINE);

            // Table
            PdfPTable table = new PdfPTable(2);
            table.setWidthPercentage(100);
            table.setWidths(new float[]{3, 2});

            PdfPCell h1 = new PdfPCell(new Phrase("Username", headerFont));
            h1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table.addCell(h1);

            PdfPCell h2 = new PdfPCell(new Phrase("Role", headerFont));
            h2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table.addCell(h2);

            ResultSet rs = jdbc.getAllUserRolesRecords();
            while (rs.next()) {
                table.addCell(new Phrase(rs.getString("USER_NAME"), textFont));
                table.addCell(new Phrase(rs.getString("USER_ROLE"), textFont));
            }

            document.add(table);
            document.close();
        } catch (Exception e) {
            throw new ServletException("PDF generation failed", e);
        }
    }

    // Footer class
    static class FooterHandler extends PdfPageEventHelper {
        PdfTemplate total;

        @Override
        public void onOpenDocument(PdfWriter writer, Document document) {
            total = writer.getDirectContent().createTemplate(30, 16);
        }

        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte cb = writer.getDirectContent();
            cb.beginText();
            try {
                cb.setFontAndSize(BaseFont.createFont(), 10);
                String text = "Page " + writer.getPageNumber() + " of ";
                float x = document.right() - 100;
                float y = document.bottom() - 20;
                cb.setTextMatrix(x, y);
                cb.showText(text);
                cb.endText();
                cb.addTemplate(total, x + cb.getEffectiveStringWidth(text, false), y);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onCloseDocument(PdfWriter writer, Document document) {
            total.beginText();
            try {
                total.setFontAndSize(BaseFont.createFont(), 10);
                total.setTextMatrix(0, 0);
                total.showText(String.valueOf(writer.getPageNumber()));
                total.endText();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
